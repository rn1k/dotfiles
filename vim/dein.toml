# dein.vim
[[plugins]]
repo = 'Shougo/dein.vim'

# coleur scheme
# [[plugins]]
# repo = 'tomasr/molokai'
# hook_add = 'colorscheme molokai'

# tree表示
[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = 'map <C-e> :NERDTreeToggle<CR>'

[[plugins]]
repo = 'tpope/vim-fugitive'

# status line
# [[plugins]]
# repo = 'vim-airline/vim-airline'
# [[plugins]]
# repo = 'vim-airline/vim-airline-themes'
# hook_add = """
# let g:airline_powerline_fonts = 1
# let g:airline_theme = 'powerlineish'
# let g:airline#extensions#branch#enabled = 1
# let g:airline_skip_empty_sections = 1
# let g:airline_section_b = '%{airline#extensions#branch#get_head()}'
# """

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = 'let g:lightline = {"colorscheme": "wombat"}'

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
# 文脈からファイルタイプを推測する
repo = 'Shougo/context_filetype.vim'

[[plugins]]
# カーソル位置の文脈でファイルタイプを変更
repo = 'osyo-manga/vim-precious'
depends = ['context_filetype.vim']

[[plugins]]
# .vimrcを活かしたままsudoできる
repo = 'vim-scripts/sudo.vim'

[[plugins]]
# 非同期コマンド実行プラグイン
repo = 'Shougo/vimproc.vim'
hook_post_update = ''' " {{{
    if dein#util#_is_windows()
        let cmd = 'tools\\update-dll-mingw'
    elseif dein#util#_is_cygwin()
        let cmd = 'make -f make_cygwin.mak'
    elseif executable('gmake')
        let cmd = 'gmake'
    else
        let cmd = 'make'
    endif
    let g:dein#plugin.build = cmd
''' # }}}

[[plugins]]
repo = 'joshdick/onedark.vim'
hook_add = 'colorscheme onedark'

[[plugins]]
repo = 'soramugi/auto-ctags.vim'
hook_add = '''
  let g:auto_ctags = 1
  let g:auto_ctags_directory_list = ['.git', '.svn']
  nnoremap <C-h> :vsp<CR> :exe("tjump ".expand('<cword>'))<CR>
  nnoremap <C-k> :split<CR> :exe("tjump ".expand('<cword>'))<CR>
'''

[[plugins]]
# Vimからブラウザを開く
repo = 'tyru/open-browser.vim'

[[plugins]]
# データ選択インターフェース
repo = 'Shougo/unite.vim'
depends = ['vimproc.vim']
hook_add = ''' " {{{
    " Prefix keyをSpaceに
    nmap <Space> [unite]
    " Esc2回でUniteウィンドウを閉じる
    autocmd FileType unite,vimfiler nnoremap <buffer> <silent> <ESC><ESC> :q<CR>
    autocmd FileType unite,vimfiler inoremap <buffer> <silent> <ESC><ESC> <ESC>:q<CR>
    " Uniteのステータスラインを自前のものにする
    let g:unite_force_overwrite_statusline = 0
    " grepにptやagが使用可能な場合はそちらを使用する
    if executable('pt')
        let g:unite_source_grep_command = 'pt'
        let g:unite_source_grep_default_opts = '--nogroup --nocolor'
        let g:unite_source_grep_recursive_opt = ''
    elseif executable('ag')
        let g:unite_source_grep_command = 'ag'
        let g:unite_source_grep_default_opts = '-i --vimgrep --hidden --ignore' .
            \ ' ''.hg'' --ignore ''.svn'' --ignore ''.git'' --ignore ''.bzr'' '
        let g:unite_source_grep_recursive_opt = ''
    endif
    " Space+ggでカレントバッファのディレクトリ内をgrepまたはgit grep
    nnoremap <silent> [unite]gg :<C-u>call <SID>unite_smart_grep_buffer_dir()<CR>
    function! s:unite_smart_grep_buffer_dir()
        if system('git rev-parse --is-inside-work-tree') == "true\n"
            exec ':Unite grep/git:' . expand('%:h')
        else
            exec ':Unite grep:' . expand('%:h')
        endif
    endfunction
''' # }}}

[[plugins]]
# ファイルエクスプローラ
repo = 'Shougo/vimfiler.vim'
depends = ['unite.vim']
hook_add = ''' " {{{
    " VimFilerのステータスラインを自前のものにする
    let g:vimfiler_force_overwrite_statusline = 0
    " VimFilerを標準のファイルマネージャーとして使う
    let g:vimfiler_as_default_explorer = 1
    " Space+ffでカレントバッファのディレクトリを開く
    noremap <silent> [unite]ff :<C-u>VimFilerBufferDir<CR>
''' # }}}

[[plugins]]
repo = 'stanangeloff/php.vim'

[[plugins]]
repo = 'tpope/vim-surround'
